language: c
python:
  - "2.4"
compiler:
  - gcc
  - clang
env:
  global:
    - TEST_CMD="make check"
    - EXTRA_CONFIG=""
    # Development packages, EXTRA_PKGS saved for additional builds
    - CORE_PKGS="libusb-1.0-0-dev libiscsi-dev librados-dev libncurses5-dev"
    - NET_PKGS="libseccomp-dev libgnutls-dev libssh2-1-dev  libspice-server-dev libspice-protocol-dev libnss3-dev"
    - GUI_PKGS="libgtk-3-dev libvte-2.90-dev libsdl1.2-dev libpng12-dev libpixman-1-dev"
    - EXTRA_PKGS=""
  matrix:
  - TARGETS=alpha-softmmu,alpha-linux-user
  - TARGETS=arm-softmmu,arm-linux-user
  - TARGETS=cris-softmmu
  - TARGETS=i386-softmmu,x86_64-softmmu
  - TARGETS=lm32-softmmu
  - TARGETS=m68k-softmmu
  - TARGETS=microblaze-softmmu,microblazeel-softmmu
  - TARGETS=mips-softmmu,mips64-softmmu,mips64el-softmmu,mipsel-softmmu
  - TARGETS=moxie-softmmu
  - TARGETS=or32-softmmu,
  - TARGETS=ppc-softmmu,ppc64-softmmu,ppcemb-softmmu
  - TARGETS=s390x-softmmu
  - TARGETS=sh4-softmmu,sh4eb-softmmu
  - TARGETS=sparc-softmmu,sparc64-softmmu
  - TARGETS=unicore32-softmmu
  - TARGETS=xtensa-softmmu,xtensaeb-softmmu
git:
  # we want to do this ourselves
  submodules: false
before_install:
  #- git submodule update --init --recursive
  - sudo apt-get update -qq
  - sudo apt-get install -qq ${CORE_PKGS} ${NET_PKGS} ${GUI_PKGS} ${EXTRA_PKGS}
script: "./configure --target-list=${TARGETS} ${EXTRA_CONFIG} && make && ${TEST_CMD}"
matrix:
  # We manually include a number of additional build for non-standard bits
  include:
    # Debug related options
    - env: TARGETS=i386-softmmu,x86_64-softmmu
      compiler: gcc
           EXTRA_CONFIG="--enable-debug"
    - env: TARGETS=i386-softmmu,x86_64-softmmu
           EXTRA_CONFIG="--enable-debug --enable-tcg-interpreter"
      compiler: gcc
    # Currently configure doesn't force --disable-pie
    - env: TARGETS=i386-softmmu,x86_64-softmmu
           EXTRA_CONFIG="--enable-gprof --enable-gcov --disable-pie"
      compiler: gcc
    - env: TARGETS=i386-softmmu,x86_64-softmmu
           EXTRA_PKGS="sparse"
           EXTRA_CONFIG="--enable-sparse"
      compiler: gcc
    # All the trace backends (apart from dtrace)
    - env: TARGETS=i386-softmmu,x86_64-softmmu
           EXTRA_CONFIG="--enable-trace-backend=stderr"
      compiler: gcc
    - env: TARGETS=i386-softmmu,x86_64-softmmu
           EXTRA_CONFIG="--enable-trace-backend=simple"
      compiler: gcc
    - env: TARGETS=i386-softmmu,x86_64-softmmu
           EXTRA_CONFIG="--enable-trace-backend=ftrace"
           TEST_CMD=""
      compiler: gcc
    # This disabled make check for the ftrace backend which needs more setting up
    # Currently broken on 12.04 due to mis-packaged liburcu and changed API, will be pulled.
    #- env: TARGETS=i386-softmmu,x86_64-softmmu
    #       EXTRA_PKGS="liblttng-ust-dev liburcu-dev"
    #       EXTRA_CONFIG="--enable-trace-backend=ust"
# XQEMU
before_script:
  # Travis CI / Ubuntu 12.04 GLEW is too old
  - wget http://downloads.sourceforge.net/project/glew/glew/1.12.0/glew-1.12.0.tgz
  - tar -xzvf glew-1.12.0.tgz
  - cd glew-1.12.0
  # GLEW sucks, we'll just create a fake output dir
  - if [ "$I386" = true ]; then true
      && GLEW_FLAGS=-m32
    ;else true; fi
  - if [ "$X86_64" = true ]; then true
      && GLEW_FLAGS=-m64
    ;else true; fi
  - mkdir -p /tmp/glew/usr/include
  - if [ "$LINUX" = true ] ; then true
      && cmake -DCMAKE_INSTALL_PREFIX=/tmp/glew/usr -DCMAKE_C_COMPILER=/usr/bin/gcc -DCMAKE_C_FLAGS="${GLEW_FLAGS}" -DCMAKE_CXX_COMPILER=/usr/bin/g++ -DCMAKE_CXX_FLAGS="${GLEW_FLAGS}" .
    ;else true; fi
  - if [ "$WINDOWS" = true ]; then true
      && cmake -DPKG_CONFIG_EXECUTABLE=/usr/bin/${PREFIX}-pkg-config -DCMAKE_INSTALL_PREFIX=/tmp/glew/usr -DCMAKE_C_COMPILER=/usr/bin/${PREFIX}-gcc -DCMAKE_C_FLAGS="${GLEW_FLAGS}" -DCMAKE_CXX_COMPILER=/usr/bin/${PREFIX}-g++ -DCMAKE_CXX_FLAGS="${GLEW_FLAGS}" -DCMAKE_RC_COMPILER=/usr/bin/${PREFIX}-windres -DCMAKE_SYSTEM_NAME=Windows .
    ;else true; fi
  - make && sudo make install
  - sudo cp -Rf include/* /tmp/glew/usr/include/
  - sudo ls -R -l /tmp/glew/
  - sudo cp -Rf /tmp/glew/usr/include/* ${INC_PATH}/
  - sudo cp -Rf /tmp/glew/usr/lib/* ${LIB_PATH}/
  - sudo rm -rf /tmp/glew
  - unset GLEW_FLAGS
  - cd ..
  - ls -l ${INC_PATH}
  - ls -l ${LIB_PATH}
install:
  - export EXTRA_CONFIG="--enable-opengl --disable-vnc --disable-user --disable-xen --disable-werror --enable-debug"
  - if [ "$LINUX" = true ] ; then true
      && export EXTRA_CONFIG="--enable-kvm ${EXTRA_CONFIG}"
    ;else true; fi  
    # 64 bit Linux
  - if  [ "$LINUX" = true ] && [ "$X86_64" = true ]; then true
      && echo "64 Bit Linux"
      && sudo apt-get install zlib1g-dev libgl1-mesa-dev freeglut3-dev
      && export EXTRA_CONFIG="--extra-cflags=-m64 ${EXTRA_CONFIG}"
      && export LIB_PATH=/usr/lib/x86_64-linux-gnu
      && export INC_PATH=/usr/include/x86_64-linux-gnu
    ;else true; fi
  # 32 bit - We don't need java and it makes the update somewhat slower..
  #          Also this breaks /usr/bin/gcc somehow so we add it again
  #          We also have to deinstall libssh2-1 or we get errors
  - if  [ "$LINUX" = true ] && [ "$I386" = true ]; then true
      && echo "32 Bit Linux"
      && sudo apt-get remove oracle-java7-installer oracle-java8-installer
      && sudo apt-get install gcc-multilib g++-multilib
      && sudo apt-get install pkg-config:i386 libc6-dev:i386
      && sudo apt-get install libglib2.0-dev:i386 --no-install-recommends
      && sudo apt-get install libpixman-1-dev:i386 libx11-dev:i386
      && sudo apt-get install lib32z1-dev libx11-dev:i386 libxmu-dev:i386 libxi-dev:i386 libsm-dev:i386 libxt-dev:i386 libxext-dev:i386 libgl1-mesa-dev:i386 libglu1-mesa-dev:i386 freeglut3:i386 freeglut3-dev:i386
      && sudo apt-get install libssh2-1:i386
      && sudo apt-get install libssh2-1-dev:i386
      && sudo ln -s /usr/bin/gcc-4.6 /usr/bin/gcc
      && sudo ln -s /usr/bin/g++-4.6 /usr/bin/g++
      && export EXTRA_CONFIG="--extra-cflags=-m32 ${EXTRA_CONFIG}"
      && export LIB_PATH=/usr/lib/i386-linux-gnu
      && export INC_PATH=/usr/include/i386-linux-gnu
    ;else true; fi
  - if [ "$WINDOWS" = true ] && [ "$I386" = true ]; then true
      && echo "32 Bit Windows"
      && ARCH=i686
      && PREFIX=i686-w64-mingw32
      && USR_PREFIX=${PREFIX}
      && WIN=win32
      && C_FLAGS=-m32
    ;else true; fi
  - if [ "$WINDOWS" = true ] && [ "$X86_64" = true ]; then true
      && echo "64 Bit Windows"
      && ARCH=x86-64
      && PREFIX=x86_64-w64-mingw32
      && USR_PREFIX=${PREFIX}
      && WIN=win64
      && C_FLAGS=-m64
    ;else true; fi
  # Windows vars
  - if  [ "$WINDOWS" = true ]; then true
      && export EXTRA_CONFIG="--cross-prefix=${PREFIX}- --cc=${PREFIX}-gcc --extra-cflags=${C_FLAGS} ${EXTRA_CONFIG}"
      && export LIB_PATH=/usr/${USR_PREFIX}/lib
      && export INC_PATH=/usr/${USR_PREFIX}/include
    ;else true; fi
  # windows base and qemu deps
  - if  [ "$WINDOWS" = true ]; then true
      && sudo apt-get install binutils-mingw-w64-${ARCH} gcc-mingw-w64-${ARCH} g++-mingw-w64-${ARCH} gfortran-mingw-w64-${ARCH}
      && echo -e '#!/bin/sh\nbasename=`basename $0`\nprefix=/usr/`echo $basename|sed s/-pkg-config//`\nPKG_CONFIG_LIBDIR=$prefix/lib/pkgconfig\nexport PKG_CONFIG_LIBDIR\npkg-config --define-variable=prefix=$prefix $@' | sudo tee /usr/bin/${PREFIX}-pkg-config
      && sudo chmod +x /usr/bin/${PREFIX}-pkg-config
      && wget http://ftp.gnome.org/pub/gnome/binaries/${WIN}/glib/2.24/glib_2.24.2-2_${WIN}.zip
      && sudo unzip glib_2.24.2-2_${WIN}.zip -d /usr/${USR_PREFIX}
      && wget http://ftp.gnome.org/pub/gnome/binaries/${WIN}/glib/2.24/glib-dev_2.24.2-2_${WIN}.zip
      && sudo unzip glib-dev_2.24.2-2_${WIN}.zip -d /usr/${USR_PREFIX}
      && wget http://ftp.gnome.org/pub/gnome/binaries/${WIN}/dependencies/gettext-runtime-dev_0.18.1.1-2_${WIN}.zip
      && sudo ln -s /usr/${USR_PREFIX}/lib/libintl.dll.a /usr/${USR_PREFIX}/lib/libintl.a
      && sudo unzip gettext-runtime-dev_0.18.1.1-2_${WIN}.zip -d /usr/${USR_PREFIX}
      && wget http://ftp.gnome.org/pub/gnome/binaries/${WIN}/dependencies/pixman-dev_0.18.4-1_${WIN}.zip
      && sudo unzip pixman-dev_0.18.4-1_${WIN}.zip -d /usr/${USR_PREFIX}
    ;else true; fi
  # windows wgl-extension headers
  - if  [ "$WINDOWS" = true ]; then true
      && sudo wget http://www.opengl.org/registry/api/wglext.h -O ${INC_PATH}/GL/wglext.h
    ;else true; fi
  # OpenGL pkg-config
  - if  [ "$WINDOWS" = true ]; then true
      && echo -e 'Name:\x20gl\nVersion:\x200\nDescription:\x20OpenGL\nLibs:\x20-lopengl32' | sudo tee /usr/${USR_PREFIX}/lib/pkgconfig/gl.pc
      && echo -e 'Name:\x20glu\nVersion:\x200\nDescription:\x20OpenGL\nLibs:\x20-lglu32' | sudo tee /usr/${USR_PREFIX}/lib/pkgconfig/glu.pc
    ;else true; fi
  # windows freeglut (bin package because we don't have cmake 2.8.8)
  - if  [ "$WINDOWS" = true ]; then true
      && wget http://files.transmissionzero.co.uk/software/development/GLUT/freeglut-MinGW.zip
      && unzip freeglut-MinGW.zip
      && sudo cp -R freeglut/include/* ${INC_PATH}/
    ;else true; fi
  - if  [ "$WINDOWS" = true ] && [ "$I386" = true ]; then true
      && sudo cp -R freeglut/lib/*.a ${LIB_PATH}/
    ;else true; fi
  - if  [ "$WINDOWS" = true ] && [ "$X86_64" = true ]; then true
      && sudo cp -R freeglut/lib/x64/*.a ${LIB_PATH}/
    ;else true; fi
  #- sudo ln -s /usr/${USR_PREFIX}/lib/libglut32.a /usr/${USR_PREFIX}/lib/libglut32win.a
  # windows zlib
  - if  [ "$WINDOWS" = true ]; then true
      && wget http://zlib.net/zlib-1.2.8.tar.gz
      && tar xvfz zlib-1.2.8.tar.gz
      && cd zlib-1.2.8
      && sudo make -f win32/Makefile.gcc PREFIX=${PREFIX}- BINARY_PATH=/usr/${USR_PREFIX}/bin INCLUDE_PATH=/usr/${USR_PREFIX}/include LIBRARY_PATH=/usr/${USR_PREFIX}/lib install
      && cd ..
    ;else true; fi
      #&& wget http://www.libsdl.org/release/SDL-devel-1.2.15-mingw32.tar.gz
      #&& tar -xzvf SDL-devel-1.2.15-mingw32.tar.gz
      #&& cd SDL-1.2.15
      #&& sudo make install-sdl prefix=/usr/${PREFIX}
      #&& cd ..
  - export TEST_CMD=""
matrix:
  exclude:
    - compiler: gcc
    - compiler: clang
  include:
    - env: I386=true LINUX=true TARGETS=xbox-softmmu
      compiler: clang
    #- env: I386=true LINUX=true TARGETS=xbox-softmmu
    #  compiler: gcc
    - env: X86_64=true LINUX=true TARGETS=xbox-softmmu
      compiler: clang
    #- env: X86_64=true LINUX=true TARGETS=xbox-softmmu
    #  compiler: gcc
    - env: I386=true WINDOWS=true TARGETS=xbox-softmmu
      compiler: gcc
    - env: X86_64=true WINDOWS=true TARGETS=xbox-softmmu
      compiler: gcc
    # Missing feature flag and we probably have to change this file a lot
    #- env: I386=true OSX=true TARGETS=xbox-softmmu
    #  compiler: clang
    #- env: X86_64=true OSX=true TARGETS=xbox-softmmu
    #  compiler: clang
